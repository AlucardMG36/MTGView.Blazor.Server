// <auto-generated />
using System;
using MTGView.Data.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTGView.Data.EFCore.Migrations
{
    [DbContext(typeof(MagicthegatheringDbContext))]
    partial class MagicthegatheringDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MTGView.Core.Models.Legality", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("format")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex(new[] { "uuid" }, "IX_Legalities_Uuid");

                    b.HasIndex(new[] { "status" }, "IX_Legalities_status");

                    b.ToTable("legalities", "MTG");
                });

            modelBuilder.Entity("MTGView.Core.Models.MagicCard", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<Guid>("CollectionCardMappingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("artist")
                        .HasMaxLength(390)
                        .IsUnicode(false)
                        .HasColumnType("varchar(390)");

                    b.Property<string>("asciiName")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("availability")
                        .HasMaxLength(170)
                        .IsUnicode(false)
                        .HasColumnType("varchar(170)");

                    b.Property<string>("borderColor")
                        .HasMaxLength(110)
                        .IsUnicode(false)
                        .HasColumnType("varchar(110)");

                    b.Property<string>("cardParts")
                        .HasMaxLength(840)
                        .IsUnicode(false)
                        .HasColumnType("varchar(840)");

                    b.Property<string>("colorIdentity")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("colorIndicator")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("colors")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("duelDeck")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<short?>("edhrecRank")
                        .HasColumnType("smallint");

                    b.Property<string>("faceFlavorName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("finishes")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.Property<string>("flavorText")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("frameEffects")
                        .HasMaxLength(390)
                        .IsUnicode(false)
                        .HasColumnType("varchar(390)");

                    b.Property<string>("frameVersion")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)");

                    b.Property<short?>("hasAlternativeDeckLimit")
                        .HasColumnType("smallint");

                    b.Property<short?>("hasContentWarning")
                        .HasColumnType("smallint");

                    b.Property<int?>("index")
                        .HasColumnType("int");

                    b.Property<short?>("isAlternative")
                        .HasColumnType("smallint");

                    b.Property<short?>("isFullArt")
                        .HasColumnType("smallint");

                    b.Property<short?>("isFunny")
                        .HasColumnType("smallint");

                    b.Property<short?>("isOnlineOnly")
                        .HasColumnType("smallint");

                    b.Property<short?>("isOversized")
                        .HasColumnType("smallint");

                    b.Property<short?>("isPromo")
                        .HasColumnType("smallint");

                    b.Property<short?>("isRebalanced")
                        .HasColumnType("smallint");

                    b.Property<short?>("isReprint")
                        .HasColumnType("smallint");

                    b.Property<short?>("isReserved")
                        .HasColumnType("smallint");

                    b.Property<short?>("isStarter")
                        .HasColumnType("smallint");

                    b.Property<short?>("isStorySpotlight")
                        .HasColumnType("smallint");

                    b.Property<short?>("isTextless")
                        .HasColumnType("smallint");

                    b.Property<short?>("isTimeshifted")
                        .HasColumnType("smallint");

                    b.Property<string>("keywords")
                        .HasMaxLength(590)
                        .IsUnicode(false)
                        .HasColumnType("varchar(590)");

                    b.Property<string>("layout")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)");

                    b.Property<short?>("life")
                        .HasColumnType("smallint");

                    b.Property<string>("loyalty")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("manaCost")
                        .HasMaxLength(330)
                        .IsUnicode(false)
                        .HasColumnType("varchar(330)");

                    b.Property<short?>("manaValue")
                        .HasColumnType("smallint");

                    b.Property<string>("mtgjsonV4Id")
                        .HasMaxLength(390)
                        .IsUnicode(false)
                        .HasColumnType("varchar(390)");

                    b.Property<int?>("mtgoFoilId")
                        .HasColumnType("int");

                    b.Property<int?>("mtgoId")
                        .HasColumnType("int");

                    b.Property<int?>("multiverseId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasMaxLength(620)
                        .IsUnicode(false)
                        .HasColumnType("varchar(620)");

                    b.Property<string>("number")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("originalPrintings")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("originalReleaseDate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("otherFaceIds")
                        .HasMaxLength(800)
                        .IsUnicode(false)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("power")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("printings")
                        .HasMaxLength(1700)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1700)");

                    b.Property<string>("promoTypes")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)");

                    b.Property<string>("purchaseUrls")
                        .HasMaxLength(2760)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2760)");

                    b.Property<string>("rarity")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("rebalancedPrintings")
                        .HasMaxLength(390)
                        .IsUnicode(false)
                        .HasColumnType("varchar(390)");

                    b.Property<Guid>("scryfallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("scryfallIllustrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("scryfallOracleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("securityStamp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("setCode")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("side")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("signature")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("subtypes")
                        .HasMaxLength(310)
                        .IsUnicode(false)
                        .HasColumnType("varchar(310)");

                    b.Property<string>("supertypes")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("text")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("toughness")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("type")
                        .HasMaxLength(560)
                        .IsUnicode(false)
                        .HasColumnType("varchar(560)");

                    b.Property<string>("types")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)");

                    b.Property<Guid?>("uuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("variations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("watermark")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.HasKey("id");

                    b.HasIndex("CollectionCardMappingId");

                    b.HasIndex(new[] { "uuid" }, "IX_Cards_UUID");

                    b.ToTable("Cards", "MTG");
                });

            modelBuilder.Entity("MTGView.Core.Models.MagicSet", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("baseSetSize")
                        .HasColumnType("int");

                    b.Property<string>("block")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("booster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<bool>("isFoilOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("isForeignOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("isNonFoilOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("isOnlineOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("isPartialPreview")
                        .HasColumnType("bit");

                    b.Property<string>("keyruneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("mcmId")
                        .HasColumnType("float");

                    b.Property<decimal?>("mcmIdExtras")
                        .HasColumnType("decimal(5,1)");

                    b.Property<string>("mcmName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mtgoCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("parentCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("sealedProduct")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double?>("tcgplayerGroupId")
                        .HasColumnType("float");

                    b.Property<int>("totalSetSize")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "code" }, "IX_Mtg_Sets_Code");

                    b.HasIndex(new[] { "type" }, "IX_Mtg_Sets_Type");

                    b.ToTable("sets", "MTG");
                });

            modelBuilder.Entity("MTGView.Core.Models.Meta", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id");

                    b.ToTable("Meta", "MTG");
                });

            modelBuilder.Entity("MTGView.Core.Models.PersonalCardMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonalCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PersonalCardMapping");
                });

            modelBuilder.Entity("MTGView.Core.Models.PersonalCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonalCardMappingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonalCardMappingId");

                    b.ToTable("PersonalCollection");
                });

            modelBuilder.Entity("MTGView.Core.Models.Ruling", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<string>("RuleText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("text");

                    b.Property<Guid?>("RulingGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Index" }, "IX_Rulings_Index");

                    b.HasIndex(new[] { "RulingGuid" }, "IX_Rulings_Uuid");

                    b.ToTable("rulings", "MTG");
                });

            modelBuilder.Entity("MTGView.Core.Models.MagicCard", b =>
                {
                    b.HasOne("MTGView.Core.Models.PersonalCardMapping", "CollectionCardMapping")
                        .WithMany("MagicCards")
                        .HasForeignKey("CollectionCardMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MagicCards_PersonalCardMapping_Id");

                    b.Navigation("CollectionCardMapping");
                });

            modelBuilder.Entity("MTGView.Core.Models.PersonalCollection", b =>
                {
                    b.HasOne("MTGView.Core.Models.PersonalCardMapping", "PersonalCardMapping")
                        .WithMany("Collections")
                        .HasForeignKey("PersonalCardMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalCardMapping");
                });

            modelBuilder.Entity("MTGView.Core.Models.PersonalCardMapping", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("MagicCards");
                });
#pragma warning restore 612, 618
        }
    }
}
