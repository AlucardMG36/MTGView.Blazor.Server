// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable

using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;

namespace MTGView.Data.EFCore.Contexts;

public partial class MagicthegatheringDbContext : DbContext
{
    public MagicthegatheringDbContext(DbContextOptions<MagicthegatheringDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MagicCard> Cards { get; set; } = null!;
    public virtual DbSet<Meta> Metas { get; set; } = null!;
    public virtual DbSet<Legality> Legalities { get; set; } = null!;
    public virtual DbSet<Ruling> Rulings { get; set; } = null!;
    public virtual DbSet<MagicSet> Sets { get; set; } = null!;

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.CardConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MetaConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LegalityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RulingConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SetConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    public void BulkInsertAll<T>(IEnumerable<T> entities)
    {
        entities = entities.ToArray();

        var cs = Database.GetConnectionString();

        using var conn = new SqlConnection(cs);

        conn.Open();

        using var transaction = conn.BeginTransaction();
        try
        {
            var t = typeof(T);

            var tableAttribute = (TableAttribute)t.GetCustomAttributes(typeof(TableAttribute), false).Single();

            var bulkCopy = new SqlBulkCopy(conn)
            {
                DestinationTableName = tableAttribute.Name
            };

            var properties = t.GetProperties().Where(EventTypeFilter).ToArray();
            var table = new DataTable();

            foreach (var property in properties)
            {
                var propertyType = property.PropertyType;

                if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    propertyType = Nullable.GetUnderlyingType(propertyType);
                }

                table.Columns.Add(new DataColumn(property.Name, propertyType));
            }

            foreach (var entity in entities)
            {
                table.Rows.Add(properties.Select(property => GetPropertyValue(property.GetValue(entity, null))).ToArray());
            }

            bulkCopy.WriteToServer(table);

            transaction.Commit();
        }
        finally
        {
            conn.Close();
        }
    }

    public async Task BulkInsertAllAsync<T>(IEnumerable<T> entities, CancellationToken cancellationToken = default)
    {
        entities = entities.ToArray();

        var connectionString = Database.GetConnectionString();

        using var connection = new SqlConnection(connectionString);

        var t = typeof(T);

        var tableAttribute = (TableAttribute)t.GetCustomAttributes(typeof(TableAttribute), false).Single();

        await connection.OpenAsync(cancellationToken);

        await using var transaction = await connection.BeginTransactionAsync(cancellationToken);

        try
        {

            var bulkCopy = new SqlBulkCopy(connection)
            {
                DestinationTableName = tableAttribute.Name
            };

            var properties = t.GetProperties().Where(EventTypeFilter).ToArray();
            var table = new DataTable();

            foreach (var property in properties)
            {
                var propertyType = property.PropertyType;

                if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    propertyType = Nullable.GetUnderlyingType(propertyType);
                }

                table.Columns.Add(new DataColumn(property.Name, propertyType));
            }

            foreach (var entity in entities)
            {
                table.Rows.Add(properties.Select(property => GetPropertyValue(property.GetValue(entity, null))).ToArray());
            }

            bulkCopy.WriteToServer(table);

            await transaction.CommitAsync(cancellationToken);
        }
        finally
        {
            await connection.CloseAsync();
        }
    }

    private static bool EventTypeFilter(PropertyInfo p) => Attribute.GetCustomAttribute(p, typeof(ForeignKeyAttribute)) is not ForeignKeyAttribute;

    private static object GetPropertyValue(object? o) => o ?? DBNull.Value;
}
