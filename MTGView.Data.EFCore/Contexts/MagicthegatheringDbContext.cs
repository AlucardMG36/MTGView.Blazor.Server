// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable

using System.Data;
using System.Data.SqlClient;
using Microsoft.EntityFrameworkCore.Metadata;
using MTGView.Data.EFCore.Contexts.Configurations;

namespace MTGView.Data.EFCore.Contexts;

public partial class MagicthegatheringDbContext : DbContext
{
    public MagicthegatheringDbContext(DbContextOptions<MagicthegatheringDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MagicCard> Cards { get; set; } = null!;

    public virtual DbSet<Keyword> Keywords { get; set; } = null!;

    public virtual DbSet<Meta> Metas { get; set; } = null!;
    
    public virtual DbSet<Legality> Legalities { get; set; } = null!;
    
    public virtual DbSet<Ruling> Rulings { get; set; } = null!;
    
    public virtual DbSet<MagicSet> Sets { get; set; } = null!;

    public virtual DbSet<PersonalCard> PersonalCards { get; set; } = null!;

    public virtual DbSet<PersonalCardMapping> PersonalCardMappings { get; set; } = null!;

    public virtual DbSet<PersonalCollection> PersonalCollections { get; set; } = null!;

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new CardConfiguration());
        modelBuilder.ApplyConfiguration(new KeywordConfiguration());
        modelBuilder.ApplyConfiguration(new MetaConfiguration());
        modelBuilder.ApplyConfiguration(new LegalityConfiguration());
        modelBuilder.ApplyConfiguration(new RulingConfiguration());
        modelBuilder.ApplyConfiguration(new SetConfiguration());
        modelBuilder.ApplyConfiguration(new PersonalCardsConfiguration());
        modelBuilder.ApplyConfiguration(new PersonalCollectionsConfiguration());
        modelBuilder.ApplyConfiguration(new PersonalMappingsConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    private static DataColumn CreateEntityDataColumns(IProperty property)
    {
        var propertyType = Type.GetType(property.ClrType.AssemblyQualifiedName!);

        if (propertyType!.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
        {
            propertyType = Nullable.GetUnderlyingType(propertyType);
        }

        return new DataColumn(property.Name, propertyType!)
        {
            AllowDBNull = Nullable.GetUnderlyingType(Type.GetType(property.ClrType.AssemblyQualifiedName)) != null,
        };
    }

    private static object GetPropertyValue(object? o) => o ?? DBNull.Value;

}
