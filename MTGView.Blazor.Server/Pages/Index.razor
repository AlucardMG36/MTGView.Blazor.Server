@page "/"
@using MTGView.Data.Scryfall.Services
@using MTGView.Core.Enums
@using MTGView.Blazor.Server.Data

<PageTitle>Home</PageTitle>

@if (_sets is null || !_sets.Any())
{
    <Span>
        Loading Sets
        <SpinKit Type="SpinKitType.Grid" Color="#CC0000" Centered Size="4em" />
    </Span>
}
else
{
    <CardDeck Flex="Flex.Row.JustifyContent.Between.Grow.Is1">
        <Repeater TItem="ScryfallSetDetails" Items="_sets">
            <Card 
                Background="Background.Dark" 
                TextColor="TextColor.Light" 
                Margin="Margin.Is3.OnY.OnWidescreen.Is4.OnY.OnMobile" 
                Padding="Padding.Is2.OnAll.OnWidescreen.Is3.OnAll.OnWidescreen"
                Border="Border.Is2.Rounded.Light.OnAll"
                Height="Height.Is100">
                <CardHeader Background="Background.Light" TextAlignment="TextAlignment.Center">
                    <img data-src="@context.IconUri" data-sizes="auto" height="64px" width="64px" alt="@context.Name" class="lazyload" />
                </CardHeader>
                <CardBody TextAlignment="TextAlignment.Center">
                    <Paragraph>Set Name: @context.Name</Paragraph>
                    @if (!String.IsNullOrWhiteSpace(context.Block))
                    {
                        <Paragraph>Block: @context.Block Code: @context?.BlockCode</Paragraph>
                    }
                    <Paragraph>Release Date: @context.ReleasedAt.ToString("d")</Paragraph>
                    <Paragraph>Cards in Set: @context.CardsInSet</Paragraph>
                </CardBody>
                <CardFooter>
                    @context.Id
                </CardFooter>
            </Card>
        </Repeater>
    </CardDeck>
}

@code
{
    [Inject] public IScryfallSetInformationService SetInformationService { get; init; }

    [Inject] public SetInformationRepository SetInformationRepository { get; set; } = null!;

    private IEnumerable<ScryfallSetDetails> _sets = new List<ScryfallSetDetails>(200);

    protected override async Task OnInitializedAsync()
    {
        var apiSetResponse = await SetInformationService.GetAllSetsAsync();

        if (apiSetResponse.Outcome.OperationResult is OperationResult.Success)
        {
            _sets = apiSetResponse.Data.ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && (_sets is not null || _sets.Any()))
        {
            await SetInformationRepository.CreateOrUpdateMany(_sets);
        }
    }
}