// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

#nullable enable

namespace MTGView.Core.Models;

public partial class MagicCard
{
    public int id { get; set; }
    public int? index { get; set; }
    public string? artist { get; set; }
    public string? asciiName { get; set; }
    public string? availability { get; set; }
    public string? borderColor { get; set; }
    public string? cardParts { get; set; }
    public string? colorIdentity { get; set; }
    public string? colorIndicator { get; set; }
    public string? colors { get; set; }
    public string? duelDeck { get; set; }
    public int? edhrecRank { get; set; }
    public string? faceFlavorName { get; set; }
    public string? finishes { get; set; }
    public string? flavorText { get; set; }
    public string? frameEffects { get; set; }
    public string? frameVersion { get; set; }
    public bool? hasAlternativeDeckLimit { get; set; }
    public bool? hasContentWarning { get; set; }
    public bool? isAlternative { get; set; }
    public bool? isFullArt { get; set; }
    public bool? isFunny { get; set; }
    public bool? isOnlineOnly { get; set; }
    public bool? isOversized { get; set; }
    public bool? isPromo { get; set; }
    public bool? isRebalanced { get; set; }
    public bool? isReprint { get; set; }
    public bool? isReserved { get; set; }
    public bool? isStarter { get; set; }
    public bool? isStorySpotlight { get; set; }
    public bool? isTextless { get; set; }
    public bool? isTimeshifted { get; set; }
    public string? keywords { get; set; }
    public string? layout { get; set; }
    public string? loyalty { get; set; }
    public string? manaCost { get; set; }
    public decimal? manaValue { get; set; }
    public string? mtgjsonV4Id { get; set; }
    public int? mtgoFoilId { get; set; }
    public int? mtgoId { get; set; }
    public int? multiverseId { get; set; }
    public string? name { get; set; }
    public string? number { get; set; }
    public string? originalPrintings { get; set; }
    public string? originalReleaseDate { get; set; }
    public string? otherFaceIds { get; set; }
    public string? power { get; set; }
    public string? printings { get; set; }
    public string? promoTypes { get; set; }
    public string? purchaseUrls { get; set; }
    public string? rarity { get; set; }
    public string? rebalancedPrintings { get; set; }
    public Guid scryfallId { get; set; }
    public Guid? scryfallIllustrationId { get; set; }
    public Guid? scryfallOracleId { get; set; }
    public string? securityStamp { get; set; }
    public string? setCode { get; set; }
    public string? side { get; set; }
    public string? signature { get; set; }
    public string? subtypes { get; set; }
    public string? supertypes { get; set; }
    public string? text { get; set; }
    public string? toughness { get; set; }
    public string? type { get; set; }
    public string? types { get; set; }
    public Guid? uuid { get; set; }
    public string? variations { get; set; }
    public string? watermark { get; set; }

    [NotMapped]
    [JsonIgnore]
    public string? SetName { get; set; }

    [NotMapped]
    [JsonIgnore]
    public string ScryfallImageUri { get; set; }

    [NotMapped]
    [JsonIgnore]
    public string ScryfallSetIconUri { get; set; }

    [JsonIgnore]
    public Guid? CollectionCardMappingId { get; set; }

    [NotMapped] [JsonIgnore] public IEnumerable<String> ScryfallImagesAsSizes { get; set; } = new List<string>(10);

    [JsonIgnore] public virtual PersonalCardMapping CollectionCardMapping { get; set; }

    [NotMapped]
    [JsonIgnore]
    public IList<String> ManaCostSvgUris { get; set; } = new List<String>(10);

    [NotMapped] 
    [JsonIgnore] 
    public IEnumerable<Legality> Legalities { get; set; } = new List<Legality>(15);

    [NotMapped] 
    [JsonIgnore] 
    public IDictionary<String,String> ColorIdentitySvgUris { get; set; } = new Dictionary<String,String>(5);

    public static MagicCard From(MagicCard card, IEnumerable<Legality> legalities)
    {
        card.Legalities = legalities.ToArray();
        return card;
    }
}
